{
  "gitLessons": [
    {
      "LessonTitle": "Pengenalan Prompt Engineering",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Apa itu Prompt?",
          "Example": "Tuliskan paragraf pendek yang menggambarkan tujuan liburan favorit Anda",
          "Explanation": "Prompt adalah input yang menghasilkan output yang diinginkan."
        }
      ]
    },
    {
      "LessonTitle": "Strategi: Tulis instruksi yang jelas",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Taktik: Sertakan detail dalam pertanyaan Anda untuk mendapatkan jawaban yang lebih relevan",
          "Example": "Bagaimana cara menambahkan jumlah dolar dalam satu baris di Excel? Saya ingin melakukannya secara otomatis untuk seluruh lembar baris dengan semua totalnya berakhir di sebelah kanan dalam kolom yang disebut 'Total'.",
          "Explanation": "Untuk mendapatkan respons yang sangat relevan, pastikan permintaan menyediakan detail atau konteks penting. Jika tidak, Anda membiarkan model menebak apa yang Anda maksud."
        },
        {
          "StepNumber": 2,
          "Description": "Taktik: Minta model untuk mengadopsi persona",
          "Example": "Ketika saya meminta bantuan untuk menulis sesuatu, Anda akan menjawab dengan dokumen yang berisi setidaknya satu lelucon atau komentar lucu di setiap paragraf. Tulis catatan terima kasih kepada pemasok baut baja saya karena pengirimannya tepat waktu dan dalam waktu singkat. Ini memungkinkan kami untuk mengirimkan pesanan penting.",
          "Explanation": "Pesan sistem dapat digunakan untuk menentukan persona yang digunakan oleh model dalam jawabannya."
        },
        {
          "StepNumber": 3,
          "Description": "Taktik: Gunakan pembatas untuk dengan jelas menunjukkan bagian-bagian yang berbeda dari input",
          "Example": "Ringkas teks yang dibatasi oleh tanda kutip tiga dengan sebuah haiku.\n\n\"\"\"masukkan teks di sini\"\"\"",
          "Explanation": "Pembatas seperti tanda kutip tiga, tag XML, judul bagian, dll. dapat membantu menandai bagian teks yang harus diperlakukan secara berbeda."
        },
        {
          "StepNumber": 4,
          "Description": "Taktik: Tentukan langkah-langkah yang diperlukan untuk menyelesaikan tugas",
          "Example": "masukkan teks di sini",
          "Explanation": "Beberapa tugas lebih baik ditentukan sebagai rangkaian langkah. Menulis langkah-langkahnya secara eksplisit dapat memudahkan model untuk mengikutinya."
        },
        {
          "StepNumber": 5,
          "Description": "Taktik: Berikan contoh",
          "Example": "Ajarkan saya tentang kesabaran.",
          "Explanation": "Memberikan instruksi umum yang berlaku untuk semua contoh biasanya lebih efisien daripada menunjukkan semua variasi tugas dengan contoh, tetapi dalam beberapa kasus memberikan contoh mungkin lebih mudah. Misalnya, jika Anda bermaksud agar model meniru gaya tertentu dalam menanggapi pertanyaan pengguna yang sulit dijelaskan secara eksplisit. Ini dikenal sebagai 'few-shot' prompting."
        },
        {
          "StepNumber": 6,
          "Description": "Taktik: Tentukan panjang keluaran yang diinginkan",
          "Example": "Ringkas teks yang dibatasi oleh tanda kutip tiga dalam sekitar 50 kata.\n\n\"\"\"masukkan teks di sini\"\"\"",
          "Explanation": "Anda dapat meminta model untuk menghasilkan output dengan panjang target tertentu. Panjang output yang ditargetkan dapat ditentukan dalam hitungan kata, kalimat, paragraf, poin-poin, dll. Namun, perlu dicatat bahwa menginstruksikan model untuk menghasilkan sejumlah kata tertentu tidak bekerja dengan presisi tinggi. Model dapat lebih andal menghasilkan output dengan jumlah paragraf atau poin tertentu."
        }
      ]
    },
    {
      "LessonTitle": "Strategi: Menyediakan teks referensi",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Taktik: Instruksikan model untuk menjawab menggunakan teks referensi",
          "Example": "<masukkan artikel, masing-masing dibatasi oleh tanda kutip tiga>\nPertanyaan: <masukkan pertanyaan di sini>",
          "Explanation": "Jika kita dapat menyediakan model dengan informasi terpercaya yang relevan dengan pertanyaan saat ini, maka kita dapat menginstruksikan model untuk menggunakan informasi yang diberikan untuk menyusun jawabannya."
        },
        {
          "StepNumber": 2,
          "Description": "Taktik: Instruksikan model untuk menjawab dengan kutipan dari teks referensi",
          "Example": "<masukkan dokumen di sini>\nPertanyaan: <masukkan pertanyaan di sini>",
          "Explanation": "Jika input telah dilengkapi dengan pengetahuan yang relevan, mudah untuk meminta model menambahkan kutipan dalam jawabannya dengan merujuk pada bagian-bagian dari dokumen yang diberikan. Perlu dicatat bahwa kutipan dalam output kemudian dapat diverifikasi secara programatis dengan pencocokan string dalam dokumen yang diberikan."
        }
      ]
    },
    {
      "LessonTitle": "Strategi: Memecah tugas kompleks menjadi sub-tugas yang lebih sederhana",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Taktik: Gunakan klasifikasi maksud untuk mengidentifikasi instruksi yang paling relevan untuk pertanyaan pengguna",
          "Example": "Saya perlu membuat internet saya berfungsi kembali.",
          "Explanation": "Untuk tugas-tugas di mana banyak set instruksi independen diperlukan untuk menangani kasus yang berbeda, dapat bermanfaat untuk terlebih dahulu mengklasifikasikan jenis pertanyaan dan menggunakan klasifikasi itu untuk menentukan instruksi mana yang diperlukan. Ini dapat dicapai dengan mendefinisikan kategori tetap dan mengkodekan instruksi yang relevan untuk menangani tugas dalam kategori tertentu. Proses ini juga dapat diterapkan secara rekursif untuk menguraikan tugas menjadi serangkaian tahapan. Keuntungan dari pendekatan ini adalah bahwa setiap pertanyaan hanya akan berisi instruksi yang diperlukan untuk melakukan tahap berikutnya dari tugas yang dapat menghasilkan tingkat kesalahan yang lebih rendah dibandingkan dengan menggunakan satu pertanyaan untuk melakukan seluruh tugas. Ini juga dapat menghasilkan biaya yang lebih rendah karena prompt yang lebih besar lebih mahal untuk dijalankan (lihat informasi harga)."
        },
        {
          "StepNumber": 2,
          "Description": "Taktik: Untuk aplikasi dialog yang membutuhkan percakapan yang sangat panjang, ringkas atau saring dialog sebelumnya",
          "Example": "",
          "Explanation": "Karena model memiliki panjang konteks tetap, dialog antara pengguna dan asisten di mana seluruh percakapan termasuk dalam jendela konteks tidak dapat berlanjut tanpa batas.\nAda berbagai solusi untuk masalah ini, salah satunya adalah meringkas putaran sebelumnya dalam percakapan. Setelah ukuran input mencapai panjang ambang batas yang telah ditentukan sebelumnya, ini dapat memicu pertanyaan yang merangkum sebagian percakapan dan ringkasan percakapan sebelumnya dapat disertakan sebagai bagian dari pesan sistem. Alternatifnya, percakapan sebelumnya dapat diringkas secara asinkron di latar belakang sepanjang seluruh percakapan.\nSolusi alternatif adalah memilih secara dinamis bagian percakapan sebelumnya yang paling relevan dengan pertanyaan saat ini. Lihat taktik 'Gunakan pencarian berbasis embedding untuk mengimplementasikan pencarian pengetahuan yang efisien'."
        },
        {
          "StepNumber": 3,
          "Description": "Taktik: Ringkas dokumen panjang secara bertahap dan susun ringkasan lengkap secara rekursif",
          "Example": "",
          "Explanation": "Karena model memiliki panjang konteks tetap, mereka tidak dapat digunakan untuk meringkas teks yang lebih panjang dari panjang konteks dikurangi panjang ringkasan yang dihasilkan dalam satu pertanyaan.\nUntuk meringkas dokumen yang sangat panjang seperti buku, kita dapat menggunakan serangkaian pertanyaan untuk meringkas setiap bagian dari dokumen. Ringkasan bagian dapat digabungkan dan diringkas menghasilkan ringkasan dari ringkasan. Proses ini dapat berlangsung secara rekursif hingga seluruh dokumen diringkas. Jika perlu menggunakan informasi tentang bagian sebelumnya untuk memahami bagian selanjutnya, maka trik lebih lanjut yang dapat berguna adalah memasukkan ringkasan berjalan dari teks yang mendahului titik tertentu dalam buku saat meringkas konten pada titik tersebut. Efektivitas prosedur ini untuk meringkas buku telah dipelajari dalam penelitian sebelumnya oleh OpenAI menggunakan varian GPT-3."
        }
      ]
    },
    {
      "LessonTitle": "Strategi: Beri model waktu untuk 'berpikir'",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Taktik: Instruksikan model untuk menyusun solusinya sendiri sebelum terburu-buru mengambil kesimpulan",
          "Example": "Pernyataan Masalah: Saya sedang membangun instalasi tenaga surya dan saya membutuhkan bantuan menghitung keuangan.\n- Biaya tanah $100 / kaki persegi\n- Saya bisa membeli panel surya seharga $250 / kaki persegi\n- Saya menegosiasikan kontrak untuk pemeliharaan yang akan menelan biaya tetap $100k per tahun, dan tambahan $10 / kaki persegi\nBerapa total biaya untuk tahun pertama operasi sebagai fungsi dari jumlah kaki persegi.\n\nSolusi Siswa: Biarkan x menjadi ukuran instalasi dalam kaki persegi.\n1. Biaya tanah: 100x\n2. Biaya panel surya: 250x\n3. Biaya pemeliharaan: 100,000 + 100x\nTotal biaya: 100x + 250x + 100,000 + 100x = 450x + 100,000",
          "Explanation": "Terkadang kita mendapatkan hasil yang lebih baik ketika kita secara eksplisit menginstruksikan model untuk berpikir dari prinsip dasar sebelum mengambil kesimpulan. Misalnya jika kita ingin model mengevaluasi solusi siswa untuk masalah matematika. Cara paling jelas untuk mendekati ini adalah dengan langsung bertanya kepada model apakah solusi siswa itu benar atau tidak."
        },
        {
          "StepNumber": 2,
          "Description": "Taktik: Gunakan monolog internal atau serangkaian pertanyaan untuk menyembunyikan proses pemikiran model",
          "Example": "Pernyataan Masalah: <masukkan pernyataan masalah>\n\nSolusi Siswa: <masukkan solusi siswa>",
          "Explanation": "Taktik sebelumnya menunjukkan bahwa terkadang penting bagi model untuk berpikir secara rinci tentang suatu masalah sebelum menjawab pertanyaan tertentu. Untuk beberapa aplikasi, proses pemikiran yang digunakan model untuk sampai pada jawaban akhir tidak pantas untuk dibagikan dengan pengguna. Misalnya, dalam aplikasi bimbingan belajar, kita mungkin ingin mendorong siswa untuk menyusun jawaban mereka sendiri, tetapi proses pemikiran model tentang solusi siswa dapat mengungkapkan jawaban kepada siswa.\n\nMonolog internal adalah taktik yang dapat digunakan untuk mengurangi hal ini. Idenya adalah untuk menginstruksikan model untuk menempatkan bagian output yang dimaksudkan untuk disembunyikan dari pengguna ke dalam format terstruktur yang membuat parsingnya mudah. Kemudian sebelum menampilkan output kepada pengguna, output diparsing dan hanya sebagian output yang terlihat."
        },
        {
          "StepNumber": 3,
          "Description": "Taktik: Tanyakan pada model apakah ada yang terlewat pada putaran sebelumnya",
          "Example": "<masukkan dokumen di sini>",
          "Explanation": "Misalkan kita menggunakan model untuk mencantumkan kutipan dari sumber yang relevan dengan pertanyaan tertentu. Setelah mencantumkan setiap kutipan, model perlu menentukan apakah harus mulai menulis kutipan lain atau harus berhenti. Jika dokumen sumber besar, umum bagi model untuk berhenti terlalu dini dan gagal mencantumkan semua kutipan yang relevan. Dalam hal ini, kinerja yang lebih baik sering kali dapat diperoleh dengan meminta model dengan pertanyaan lanjutan untuk menemukan kutipan yang terlewat pada putaran sebelumnya."
        }
      ]
    },
    {
      "LessonTitle": "Strategi: Gunakan alat eksternal",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Taktik: Gunakan pencarian berbasis embedding untuk mengimplementasikan pencarian pengetahuan yang efisien",
          "Example": "",
          "Explanation": "Model dapat memanfaatkan sumber informasi eksternal jika disediakan sebagai bagian dari inputnya. Ini dapat membantu model menghasilkan respons yang lebih informatif dan terkini. Misalnya, jika pengguna menanyakan pertanyaan tentang film tertentu, mungkin berguna untuk menambahkan informasi berkualitas tinggi tentang film tersebut (misalnya aktor, sutradara, dll.) ke dalam input model. Embedding dapat digunakan untuk mengimplementasikan pencarian pengetahuan yang efisien, sehingga informasi yang relevan dapat ditambahkan ke input model secara dinamis pada saat dijalankan.\n\nEmbedding teks adalah vektor yang dapat mengukur keterkaitan antara string teks. String yang serupa atau relevan akan lebih dekat daripada string yang tidak terkait. Fakta ini, bersama dengan keberadaan algoritma pencarian vektor yang cepat berarti bahwa embedding dapat digunakan untuk mengimplementasikan pencarian pengetahuan yang efisien. Khususnya, korpus teks dapat dibagi menjadi bagian-bagian, dan setiap bagian dapat disematkan dan disimpan. Kemudian pertanyaan yang diberikan dapat disematkan dan pencarian vektor dapat dilakukan untuk menemukan bagian-bagian teks yang disematkan dari korpus yang paling terkait dengan pertanyaan (misalnya paling dekat dalam ruang embedding).\n\nContoh implementasi dapat ditemukan di OpenAI Cookbook. Lihat taktik 'Instruksikan model untuk menggunakan pengetahuan yang diambil untuk menjawab pertanyaan' untuk contoh cara menggunakan pengambilan pengetahuan untuk meminimalkan kemungkinan model akan membuat fakta yang salah."
        },
        {
          "StepNumber": 2,
          "Description": "Taktik: Gunakan eksekusi kode untuk melakukan perhitungan yang lebih akurat atau memanggil API eksternal",
          "Example": "Temukan semua akar bernilai nyata dari polinomial berikut: 3*x**5 - 5*x**4 - 3*x**3 - 7*x - 10.",
          "Explanation": "Model bahasa tidak dapat diandalkan untuk melakukan aritmatika atau perhitungan panjang secara akurat sendiri. Dalam kasus di mana ini diperlukan, model dapat diinstruksikan untuk menulis dan menjalankan kode daripada membuat perhitungannya sendiri. Khususnya, model dapat diinstruksikan untuk memasukkan kode yang dimaksudkan untuk dijalankan ke dalam format yang ditentukan seperti tanda kutip tiga. Setelah output dihasilkan, kode dapat diekstrak dan dijalankan. Akhirnya, jika perlu, output dari mesin eksekusi kode (misalnya interpreter Python) dapat disediakan sebagai input ke model untuk pertanyaan berikutnya."
        },
        {
          "StepNumber": 3,
          "Description": "Taktik: Beri model akses ke fungsi tertentu",
          "Example": "",
          "Explanation": "API Chat Completions memungkinkan pengiriman daftar deskripsi fungsi dalam permintaan. Ini memungkinkan model untuk menghasilkan argumen fungsi sesuai dengan skema yang disediakan. Argumen fungsi yang dihasilkan dikembalikan oleh API dalam format JSON dan dapat digunakan untuk menjalankan panggilan fungsi. Output yang disediakan oleh panggilan fungsi kemudian dapat dimasukkan kembali ke dalam model dalam permintaan berikutnya untuk menutup loop. Ini adalah cara yang disarankan menggunakan model OpenAI untuk memanggil fungsi eksternal. Untuk mempelajari lebih lanjut lihat bagian pemanggilan fungsi dalam panduan pengenalan generasi teks kami dan lebih banyak contoh pemanggilan fungsi di OpenAI Cookbook."
        }
      ]
    },
    {
      "LessonTitle": "Strategi: Uji perubahan secara sistematis",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Taktik: Evaluasi output model dengan mengacu pada jawaban standar emas",
          "Example": "Neil Armstrong terkenal karena menjadi manusia pertama yang menginjakkan kaki di Bulan. Peristiwa bersejarah ini terjadi pada 21 Juli 1969, selama misi Apollo 11.",
          "Explanation": "Misalkan diketahui bahwa jawaban yang benar untuk suatu pertanyaan harus merujuk pada serangkaian fakta yang diketahui. Maka kita dapat menggunakan pertanyaan model untuk menghitung berapa banyak fakta yang diperlukan yang termasuk dalam jawaban."
        }
      ]
    }
  ]
}