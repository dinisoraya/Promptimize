{
  "gitLessons": [
    {
      "LessonTitle": "Introduction to Prompt Engineering",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "What is Prompt?",
          "Example": "Write a small paragraph describing your favorite holiday destination",
          "Explanation": "A prompt is an input that produces the desired output."
        },
        {
          "StepNumber": 2,
          "Description": "What is Prompt Engineering?",
          "Example": "",
          "Explanation": "Process of designing effective prompts."
        }
      ]
    },
    {
      "LessonTitle": "Strategy: Write clear instructions",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Tactic: Include details in your query to get more relevant answers",
          "Example": "How do I add up a row of dollar amounts in Excel? I want to do this automatically for a whole sheet of rows with all the totals ending up on the right in a column called \"Total\".",
          "Explanation": "In order to get a highly relevant response, make sure that requests provide any important details or context. Otherwise you are leaving it up to the model to guess what you mean."
        },
        {
          "StepNumber": 2,
          "Description": "Tactic: Ask the model to adopt a persona",
          "Example": "When I ask for help to write something, you will reply with a document that contains at least one joke or playful comment in every paragraph. Write a thank you note to my steel bolt vendor for getting the delivery in on time and in short notice. This made it possible for us to deliver an important order.",
          "Explanation": "The system message can be used to specify the persona used by the model in its replies."
        },
        {
          "StepNumber": 3,
          "Description": "Tactic: Use delimiters to clearly indicate distinct parts of the input",
          "Example": "Summarize the text delimited by triple quotes with a haiku.\n\n\"\"\"insert text here\"\"\"",
          "Explanation": "Delimiters like triple quotation marks, XML tags, section titles, etc. can help demarcate sections of text to be treated differently."
        },
        {
          "StepNumber": 4,
          "Description": "Tactic: Specify the steps required to complete a task",
          "Example": "insert text here",
          "Explanation": "Some tasks are best specified as a sequence of steps. Writing the steps out explicitly can make it easier for the model to follow them."
        },
        {
          "StepNumber": 5,
          "Description": "Tactic: Provide examples",
          "Example": "Teach me about patience.",
          "Explanation": "Providing general instructions that apply to all examples is generally more efficient than demonstrating all permutations of a task by example, but in some cases providing examples may be easier. For example, if you intend for the model to copy a particular style of responding to user queries which is difficult to describe explicitly. This is known as \"few-shot\" prompting."
        },
        {
          "StepNumber": 6,
          "Description": "Tactic: Specify the desired length of the output",
          "Example": "Summarize the text delimited by triple quotes in about 50 words.\n\n\"\"\"insert text here\"\"\"",
          "Explanation": "You can ask the model to produce outputs that are of a given target length. The targeted output length can be specified in terms of the count of words, sentences, paragraphs, bullet points, etc. Note however that instructing the model to generate a specific number of words does not work with high precision. The model can more reliably generate outputs with a specific number of paragraphs or bullet points"
        }
      ]
    },
    {
      "LessonTitle": "Strategy: Provide refrence text",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Tactic: Instruct the model to answer using a reference text",
          "Example": "<insert articles, each delimited by triple quotes>\nQuestion: <insert question here>",
          "Explanation": "If we can provide a model with trusted information that is relevant to the current query, then we can instruct the model to use the provided information to compose its answer."
        },
        {
          "StepNumber": 2,
          "Description": "Tactic: Instruct the model to answer with citations from a reference text",
          "Example": "<insert document here>\nQuestion: <insert question here>",
          "Explanation": "If the input has been supplemented with relevant knowledge, it's straightforward to request that the model add citations to its answers by referencing passages from provided documents. Note that citations in the output can then be verified programmatically by string matching within the provided documents."
        }
      ]
    },
     {
      "LessonTitle": "Strategy: Split complex tasks into simpler subtasks",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Tactic: Use intent classification to identify the most relevant instructions for a user query",
          "Example": "I need to get my internet working again.",
          "Explanation": "For tasks in which lots of independent sets of instructions are needed to handle different cases, it can be beneficial to first classify the type of query and to use that classification to determine which instructions are needed. This can be achieved by defining fixed categories and hardcoding instructions that are relevant for handling tasks in a given category. This process can also be applied recursively to decompose a task into a sequence of stages. The advantage of this approach is that each query will contain only those instructions that are required to perform the next stage of a task which can result in lower error rates compared to using a single query to perform the whole task. This can also result in lower costs since larger prompts cost more to run (see pricing information)."
        },
        {
          "StepNumber": 2,
          "Description": "Tactic: For dialogue applications that require very long conversations, summarize or filter previous dialogue",
          "Example": "",
          "Explanation": "Since models have a fixed context length, dialogue between a user and an assistant in which the entire conversation is included in the context window cannot continue indefinitely.\nThere are various workarounds to this problem, one of which is to summarize previous turns in the conversation. Once the size of the input reaches a predetermined threshold length, this could trigger a query that summarizes part of the conversation and the summary of the prior conversation could be included as part of the system message. Alternatively, prior conversation could be summarized asynchronously in the background throughout the entire conversation.\nAn alternative solution is to dynamically select previous parts of the conversation that are most relevant to the current query. See the tactic 'Use embeddings-based search to implement efficient knowledge retrieval'."
        },
        {
          "StepNumber": 3,
          "Description": "Tactic: Summarize long documents piecewise and construct a full summary recursively",
          "Example": "",
          "Explanation": "Since models have a fixed context length, they cannot be used to summarize a text longer than the context length minus the length of the generated summary in a single query.\nTo summarize a very long document such as a book we can use a sequence of queries to summarize each section of the document. Section summaries can be concatenated and summarized producing summaries of summaries. This process can proceed recursively until an entire document is summarized. If it’s necessary to use information about earlier sections in order to make sense of later sections, then a further trick that can be useful is to include a running summary of the text that precedes any given point in the book while summarizing content at that point. The effectiveness of this procedure for summarizing books has been studied in previous research by OpenAI using variants of GPT-3."
        }
      ]
    },
    {
    "LessonTitle": "Strategy: Give models time to 'think'",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Tactic: Instruct the model to work out its own solution before rushing to a conclusion",
          "Example": "Problem Statement: I'm building a solar power installation and I need help working out the financials.\n- Land costs $100 / square foot\n- I can buy solar panels for $250 / square foot\n- I negotiated a contract for maintenance that will cost me a flat $100k per year, and an additional $10 / square foot\nWhat is the total cost for the first year of operations as a function of the number of square feet.\n\nStudent's Solution: Let x be the size of the installation in square feet.\n1. Land cost: 100x\n2. Solar panel cost: 250x\n3. Maintenance cost: 100,000 + 100x\nTotal cost: 100x + 250x + 100,000 + 100x = 450x + 100,000",
          "Explanation": "Sometimes we get better results when we explicitly instruct the model to reason from first principles before coming to a conclusion. Suppose for example we want a model to evaluate a student’s solution to a math problem. The most obvious way to approach this is to simply ask the model if the student's solution is correct or not."
        },
        {
          "StepNumber": 2,
          "Description": "Tactic: Use inner monologue or a sequence of queries to hide the model's reasoning process",
          "Example": "Problem Statement: <insert problem statement>\n\nStudent Solution: <insert student solution>",
          "Explanation": "The previous tactic demonstrates that it is sometimes important for the model to reason in detail about a problem before answering a specific question. For some applications, the reasoning process that a model uses to arrive at a final answer would be inappropriate to share with the user. For example, in tutoring applications we may want to encourage students to work out their own answers, but a model’s reasoning process about the student’s solution could reveal the answer to the student.\n\nInner monologue is a tactic that can be used to mitigate this. The idea of inner monologue is to instruct the model to put parts of the output that are meant to be hidden from the user into a structured format that makes parsing them easy. Then before presenting the output to the user, the output is parsed and only part of the output is made visible."
        },
        {
          "StepNumber": 3,
          "Description": "Tactic: Ask the model if it missed anything on previous passes",
          "Example": "<insert document here>",
          "Explanation": "Suppose that we are using a model to list excerpts from a source which are relevant to a particular question. After listing each excerpt the model needs to determine if it should start writing another or if it should stop. If the source document is large, it is common for a model to stop too early and fail to list all relevant excerpts. In that case, better performance can often be obtained by prompting the model with followup queries to find any excerpts it missed on previous passes."
        }
      ]
    },
    {
      "LessonTitle": "Strategy: Use external tools",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Tactic: Use embeddings-based search to implement efficient knowledge retrieval",
          "Example": "",
          "Explanation": "A model can leverage external sources of information if provided as part of its input. This can help the model to generate more informed and up-to-date responses. For example, if a user asks a question about a specific movie, it may be useful to add high quality information about the movie (e.g. actors, director, etc…) to the model’s input. Embeddings can be used to implement efficient knowledge retrieval, so that relevant information can be added to the model input dynamically at run-time.\n\nA text embedding is a vector that can measure the relatedness between text strings. Similar or relevant strings will be closer together than unrelated strings. This fact, along with the existence of fast vector search algorithms means that embeddings can be used to implement efficient knowledge retrieval. In particular, a text corpus can be split up into chunks, and each chunk can be embedded and stored. Then a given query can be embedded and vector search can be performed to find the embedded chunks of text from the corpus that are most related to the query (i.e. closest together in the embedding space).\n\nExample implementations can be found in the OpenAI Cookbook. See the tactic “Instruct the model to use retrieved knowledge to answer queries” for an example of how to use knowledge retrieval to minimize the likelihood that a model will make up incorrect facts."
        },
        {
          "StepNumber": 2,
          "Description": "Tactic: Use code execution to perform more accurate calculations or call external APIs",
          "Example": "Find all real-valued roots of the following polynomial: 3*x**5 - 5*x**4 - 3*x**3 - 7*x - 10.",
          "Explanation": "Language models cannot be relied upon to perform arithmetic or long calculations accurately on their own. In cases where this is needed, a model can be instructed to write and run code instead of making its own calculations. In particular, a model can be instructed to put code that is meant to be run into a designated format such as triple backtick. After an output is produced, the code can be extracted and run. Finally, if necessary, the output from the code execution engine (i.e. Python interpreter) can be provided as an input to the model for the next query."
        },
        {
          "StepNumber": 3,
          "Description": "Tactic: Give the model access to specific functions",
          "Example": "",
          "Explanation": "The Chat Completions API allows passing a list of function descriptions in requests. This enables models to generate function arguments according to the provided schemas. Generated function arguments are returned by the API in JSON format and can be used to execute function calls. Output provided by function calls can then be fed back into a model in the following request to close the loop. This is the recommended way of using OpenAI models to call external functions. To learn more see the function calling section in our introductory text generation guide and more function calling examples in the OpenAI Cookbook."
        }
      ]
    },
    {
      "LessonTitle": "Strategy: Test changes systematically",
      "Steps": [
        {
          "StepNumber": 1,
          "Description": "Tactic: Evaluate model outputs with reference to gold-standard answers",
          "Example": "Neil Armstrong is famous for being the first human to set foot on the Moon. This historic event took place on July 21, 1969, during the Apollo 11 mission.",
          "Explanation": "Suppose it is known that the correct answer to a question should make reference to a specific set of known facts. Then we can use a model query to count how many of the required facts are included in the answer."
        }
      ]
    }
  ]
}
